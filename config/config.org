#+TITLE: Literate Emacs Configuration
#+PROPERTY: header-args :tangle ./init.el
#+OPTIONS: toc:2 num:nil
#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup

This is my Emacs config, there are many like it but this one is mine.

I've used Emacs for getting on 25 years and am slightly ashamed to say that I still haven't sat down and properly "learnt"
[[https://www.gnu.org/software/emacs/manual/html_node/elisp/index.html][Emacs Lisp]] (one day I'll make time!). I have however learnt enough to cobble together my own custom configuration which
is based, in no small part, on countless others who have gracefully shared examples of their configuration and patiently
answered questions.

I found my configuration was growing as I have a habit of throwing all sorts into it then one day (<2025-10-17 Fri>)
after updating packages I found that [[sec:lsp-mode][LSP-mode]] was no longer working as it had been. At the same time I had some issues
using [[sec:magit][Magit]] and [[sec:transient][Transient]]. Whilst I fixed these it prompted me to pull my thumb out and re-write my configuration
[[https://leanpub.com/lit-config/read][literately]] and have used it as an opportunity to actually start learning Emacs Lisp a little (I find tutorials and
walk-throughs quite abstract and like to have a use-case of my own to help me learn aspects of computing).

I keep extensive [[https://org-roam.nshephard.dev][Org-roam]] notes and have separate sections on [[https://org-roam.nshephard.dev/#754f25a5-3429-4504-8a17-4efea1568eba][Emacs]], [[https://org-roam.nshephard.dev/#220d7ba9-d30e-4149-a25b-03796e098b0d][Magit]] and [[https://org-roam.nshephard.dev/#169b9c5f-df34-46ab-b64f-8ee98946ee69][Org-mode]], but have taken the opportunity
to augment this configuration not just with explanations of the configuration options themselves but a little more on
each package and how it works.

Feedback is welcome, please create an [[https://codeberg.org/slackline/emacs/issues][issue]] on the Codeberg repository and I'll pick it up.

* ToDo

Tasks I'm yet to complete in re-writing...

- [ ] Switch to using ~:custom~ over ~:config~ as described [[https://batsov.com/articles/2025/04/17/using-use-package-the-right-way/][here]].
- [ ] Test the ~compilation-finish-function~ hook will kill compilation buffers.




* On Configuration with use-package

Currently I use the built-in [[https://www.gnu.org/software/emacs/manual/html_mono/use-package.html][use-package]] and in re-writing this document have sought to adhere to the advice on [[https://batsov.com/articles/2025/04/17/using-use-package-the-right-way/][Using
use-package the right way]]. The following table is constructed from the archived [[https://github.com/jwiegley/use-package][use-package ~README.md~]] and the [[https://www.gnu.org/software/emacs/manual/html_mono/use-package.html][Emacs
docs : use-package]] page since it is now a core component of Emacs. use-package provides the [[https://www.gnu.org/software/emacs/manual/html_mono/use-package.html#Basic-Concepts][~use-package~ macro]] which
simplifies configuration.

Packages are either loaded immediately, when the package is first used (via autoloading) or can be deferred using the
~:defer~ keyword. Some autoloading can be done in response to /triggers/ in response to certain events (i.e. ~:hook~)

| Option         | Description                                                                                                                                        | Example                                                                                                                                                                                |
|----------------+----------------------------------------------------------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| [[https://github.com/jwiegley/use-package#getting-started][~:init~]]        | Execute code /before/ a package is loaded                                                                                                          | ~:init (setq foo-variable t)~                                                                                                                                                          |
| ~:defer~       | Delay loading of package. Can be ~t~ but is rarely used, typically an integer /n/ is specified to load the package after that period of idle time. | ~:defer t~ / ~:defer 30~                                                                                                                                                               |
| ~:after~       | Load after another package has been loaded.                                                                                                        | ~:after org~                                                                                                                                                                           |
| [[https://github.com/jwiegley/use-package#key-binding][~:bind~]]        | Key-bindings, plain or with a cons (~(desc . command)~)                                                                                            | ~:bind (("C-c k" . keychain-refresh-environment) ("C-c o h" . osm-home))~                                                                                                              |
|                | With a cons the description will be shown why ~which-key~                                                                                          | ~:bind ("C-c k" ("Refresh keychain" . keychain-refresh-environment) "C-c o h" ("Open OSM at home". osm-home))~                                                                         |
| [[https://github.com/jwiegley/use-package#binding-to-keymaps][~:bind-keymap~]] | Binds a keymap to the given key chord.                                                                                                             | ~:bind ("s-p" . projectile-command-map))~ / ~:bind ("s-p" ("Projectile" . projectile-command-map))~ (untested)                                                                         |
| ~:map~         | Within a ~:bind~ you can provide the mapping and modify key maps.                                                                                  | ~:bind (:map projectile-command-map ("s-p p" . projectile-switch-project))~ / ~:bind (:map projectile-command-map ("s-p p" ("Switch project" . projectile-switch-project))~ (untested) |
| [[https://github.com/jwiegley/use-package#getting-started][~:config~]]      | Executes code /after/ a package is loaded. Note that using this forces loading of the package.                                                     |                                                                                                                                                                                        |
| ~:commands~    | Creates autoloads for commands, deferring loading modules until they are used.                                                                     |                                                                                                                                                                                        |
| ~:custom~      | Alternative option for customising package, preferable over ~:config~.                                                                             |                                                                                                                                                                                        |
| [[https://www.gnu.org/software/emacs/manual/html_mono/use-package.html#Conditional-loading][~:if~]]          | Conditionally load packages.                                                                                                                       |                                                                                                                                                                                        |
| ~:hook~        | Define hooks associated with the package.                                                                                                          |                                                                                                                                                                                        |
| ~:ensure~      | Makes sure a package is loaded (eventually). Should be avoided with built-in packages as it may force downloading of newer version.                |                                                                                                                                                                                        |


Using either ~:config~ or ~:init~ will force a package to be loaded, regardless of whether you use ~:defer~ to delay
loading. Instead the alternative ~:custom~ and ~:hook~ commands should be used.

** ~:custom~

Avoids the need to ~setq~ within ~:config~ / ~:init~ sections

* Initial Setup

Library headers have specific [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Library-Headers.html][conventions]] which we setup for the ~init.el~ and all child documents. There is a header
and [[sec:footer][footer]].

#+NAME: code-init-header
#+BEGIN_SRC emacs-lisp :tangle yes
  ;;; init.el --- slackline's Emacs configuration -*- lexical-binding: t -*-
  ;; Author: N Shephard <nshephard@protonmail.com>
  ;; Keywords: configuration
  ;; URL: https://www.codeberg.org/slackline/emacs
  ;;; Commentary:
  ;; A literate and reproducible Emacs configuration

  ;;; Code:
#+END_SRC


** Package Manager Setup

The first thing we do is /disable/ ~package-enable-at-startup~ via an ~early-init.el~ because "/If non-nil, packages are
made available before reading the init file (but after reading the early init file)./" and we don't want to load
packages until we need them as it will dramatically slow down startup time.

#+NAME: code-early-init
#+BEGIN_SRC emacs-lisp :tangle early-init.el
;;; early-init.el --- Emacs early init file -*- lexical-binding: t; -*-
;;; early-init.el -- Emacs early init file -*- lexical-binding: t; -*-
;;; Commentary:
;; Runs before init.el is loaded.

;;; Code:

;; Disable package.el to prevent all packages being loaded on startup
(setq package-enable-at-startup nil)

(provide 'early-init)
;;; early-init.el ends here

#+END_SRC


The ~exec-path~ is important as it defines where programs are searched for when executing them, it is used by
~gnu-elpa-keyring-update~ to update certain things (what those are I'm not currently sure but without this first
~use-package gnu-elpa-keyring-update~ fails with ~Cannot open find file: No such file or directory,
exec-path-from-shell~).

#+NAME: code-exec-path
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package exec-path-from-shell
  :ensure t
  :custom
  (when (daemonp) (exec-path-from-shell-initialize))
  (exec-path-from-shell-copy-env "SSH_AGENT_PID")
  (exec-path-from-shell-copy-env "SSH_AGENT_SOCK")
  (exec-path (append '("~/bin"
                          "~/.local/bin"
                          "~/.cargo/bin/"
                          "~/.node/bin/"
                          )
			exec-path)))
#+END_SRC

** use-package

We now configure [[https://www.gnu.org/software/emacs/manual/html_mono/use-package.html][use-package]].

Initially I used to use the example [[https://ianyepan.github.io/posts/setting-up-use-package/][here]] which made sure ~use-package~ was always installed, but since the ~use-package~
is now part of core this is no longer required. The configuration options remain though on the off-chance I have to use
a system with outdated versions of Emacs

*NB* the following code block is /not/ tangled to configuration.

#+NAME: code-use-package-install
#+BEGIN_SRC emacs-lisp :tangle no
  (require 'package)
  (add-to-list 'package-archives '("gnu"   . "https://elpa.gnu.org/packages/"))
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
  (package-initialize)

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
#+END_SRC

We configure ~use-package~ below, not all of the values that are set (via ~setq~) are ~use-package~ variables but since
they pertain to downloading and installing packages I keep them here. Because there can be issues with GPG keys when
they are updated we first update the ~gnu-elpa-keyring~ using [[https://elpa.gnu.org/packages/gnu-elpa-keyring-update.html][gnu-elpa-keyring-update]], although this itself requires


#+NAME: code-use-package-config
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package gnu-elpa-keyring-update
  :ensure t)

(use-package use-package
  :config
  (setq use-package-always-ensure t)
  (setq use-package-expand-minimally t)
  ;; On some systems we have problems communicating with ELPA (https://emacs.stackexchange.com/a/62210)
  (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
  ;; Adding repositories along with priority https://emacs.stackexchange.com/a/2989/10100
  (setq package-archives
      '(("GNU ELPA"	. "https://elpa.gnu.org/packages/")
        ("NonGNU ELPA"  . "https://elpa.nongnu.org/nongnu/")
        ("MELPA Stable" . "https://stable.melpa.org/packages/")
        ("MELPA"	. "https://melpa.org/packages/")
        ("jcs elpa" . "https://jcs-emacs.github.io/jcs-elpa/packages/"))
      package-archive-priorities
      '(("MELPA" . 10)
        ("GNU ELPA"	. 5)
        ("NonGNU ELPA"	. 5)
        ("MELPA Stable"	. 3)
        ("jcs elpa" . 0)
        )))

#+END_SRC

*** Emacs Package Archives

There are multiple sources of Emacs packages, including those who self-host serves such as ~jcs elpa~ listed below.

+ [[https://melpa.org/][MELPA]] for the latest versions of packages and [[https://stable.melpa.org/packages/][MELPA Stable]] when you don't want bleeding edge.
+ [[https://elpa.gnu.org/packages/][GNU ELPA]] for pure Free Open Source Software
+ [[https://elpa.nongnu.org/nongnu/][NonGNU ELPA Packages]] for not quite Free Open Source Software
+ [[https://jcs-emacs.github.io/jcs-elpa/packages/][jcs elpa]]

Because the same package can be hosted across these repositories, sometimes the same version, sometimes newer, it is
useful to be able to set the ~package-archive-priorities~ where each is assigned a priority value.

** Byte Compiling
<<sec:byte-compiling>>

Byte-compilation takes your ASCII plain-text configuration files saved in ~.el~ and turns them into computer code
(~.elc~) which can be loaded quicker. There are a couple of options available ~auto-compile~ and ~compile-angel~ being
two that I have explored before. I have a hook to [[https://emacs.stackexchange.com/a/110][hide the compilation buffer]] on completion of compiling as I got fed up
of these being thrust into the foreground (*NB* currently).

*** ~auto-compile~
<<sec:auto-compile>>

**DISABLED <2025-10-29 Wed>**

#+NAME: code-auto-compile
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package auto-compile
    :custom
    (auto-compile-on-load-mode t)
    (auto-compile-on-save-mode t)
    (load-prefer-newer t)
    (native-comp-jit-compilation t)
    :hook
    (compilation-finish-functions (lambda (buf strg) (kill-buffer buf))))
#+END_SRC

*** ~compile-angle~

The [[https://github.com/jamescherti/compile-angel.el][~compile-angel~]] package seeks to improve on ~auto-compile~.

**DISABLED <2025-10-29 Wed>**

#+NAME: code-compile-angel
#+BEGIN_SRC emacs-lisp :tangle no
(use-package compile-angel
  :ensure t
  :demand t
  :custom
  (compile-angel-verbose nil)
  :config
  (compile-angel-on-load-mode)
  (add-hook 'emacs-lisp-mode-hook #'compile-angel-on-save-local-mode))
#+END_SRC


* Emacs Global Configuration

Before loading any packages we configure Emacs itself. This uses ~:config~ as we /always/ want to load and use this
configuration and we don't need to ~:defer~.

I typically use Emacs in its own GUI window but disable a lot of the graphical components such as scroll and tool
bars.


#+NAME: code-emacs-config
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package emacs
    :init
    (epa-file-enable)
    (tool-bar-mode -1)
    (scroll-bar-mode -1)
    (menu-bar-mode 1)
    (global-display-line-numbers-mode 1)
    (global-hl-line-mode 1)
    (savehist-mode 1)
    (recentf-mode 1)
    (global-auto-revert-mode 1)
    :config
    ;; Add local lisp for miscellaneous things
    (add-to-list 'load-path "~/.config/emacs/elpa/") ; Local LISP
    (add-to-list 'load-path "~/.config/emacs/lisp/") ; Local LISP
    (setq custom-file "~/.config/emacs/custom.el")
    (setq package-install-upgrade-built-in t) ; Upgrade built-in packages
    (setq enable-recursive-minibuffers t) ; Vertico - open new minibuffers from inside a minibuffer
    (setq inhibit-startup-message t) ; Hide the startup message
    (setq global-visual-line-mode t) ; Visual line wrap
    (setq inhibit-startup-screen t) ; Disable startup screen
    (setq initial-scratch-message "") ; Make *scratch* buffer blank
    (setq confirm-kill-processes nil) ; Stop confirming the killing of processes
    (setq ring-bell-function 'ignore)  ; Disable bell sound
    (setq global-auto-revert-non-file-buffers t) ; Update non-file buffers (Dired) when disk changes
    (setq use-dialog-box nil) ; No dialog pop-ups
    (setq history-length 1000) ; Mini-buffer history
    (setq-default fill-column 120) ; Reset line-length
    (setq undo-limit 320000) ; Increase the undo history limits
    (setq vc-follow-symlinks t) ; open source of symlink maintain vc (https://stackoverflow.com/a/30900018/1444043)
    (setq winner-mode t) ; toggling window configuration
    (setq initial-scratch-message nil)
    (setq pixel-scroll-precision-mode t)
    (setq lisp-indent-offset 2)
    (setq undo-strong-limit 640000)
    (setq mode-line-compact t)
    (setq dired-dwim-target t) ; move file to other pane as default destination
    (setq global-goto-address-mode t)
    ;; (setq browse-url-browser-function 'eww-browse-url) ; Set eww as the default browser
    (setq-default indent-tabs-mode nil)
    (setq-default tab-width 4)
    (setq-default sh-basic-offset 2)
    (setq-default sh-indentation 2)
    (setq-default cursor-type 'bar)     ; Line-style cursor similar to other text editors
    ;; (set-cursor-color "#62088A") ; Dark purple (not very visible)
    (set-cursor-color "#0AFF00") ; Bright Green (stands out better)
    (setq-default frame-title-format '("%f"))     ; Make window title the buffer name
    (setopt dictionary-server "dict.org")
    ;; Turn off package install warnings https://codeberg.org/jcastp/emacs.d/src/branch/main/emacs-config.org#headline-16
    ;; (when (and (fboundp 'native-comp-available-p)
    ;;         (native-comp-available-p))
    ;;   (setq native-comp-async-report-warnings-errors nil
    ;;     native-comp-deferred-compilation t))
    (set-frame-parameter nil 'alpha-background 85) ; Transparency
    (add-to-list 'default-frame-alist '(alpha-background . 85))
    ;; https://protesilaos.com/codelog/2024-11-28-basic-emacs-configuration/
    (add-to-list 'display-buffer-alist
      '("\\`\\*\\(Warnings\\|Compile-Log\\)\\*\\'"
	 (display-buffer-no-window)
	 (allow-no-window . t)))
    :bind (("C-c U" . revert-buffer)
	    ("C-c D" . toggle-debug-on-error)
	    ;; Org
	    ("\C-c l" . org-store-link)
	    ("\C-c c" . org-capture)
	    ("\C-c a" . org-agenda)
	    ("\C-c b" . org-iswitchb)
	    ("C-x p i" . org-org-cliplink) ;; From : https://github.com/rexim/org-cliplink
	    ;; Magit /code review
	    ("C-x g" . magit-status)
	    ("C-c R" . code-review-forge-pr-at-point)
	    ("s-SPC" . cycle-spacing))
    :hook
    ((latex-mode
       markdown-mode
       org-mode
       prog-mode
       text-mode) . auto-fill-mode)
    ((latex-mode
       prog-mode) . hs-minor-mode)
    (compilation-finish-functions . (lambda (buf strg) (kill-buffer buf))) ;; https://emacs.stackexchange.com/a/110
    (auto-fill-function . do-auto-fill)
    (before-save . delete-trailing-whitespace) ;; https://emacs.stackexchange.com/a/40773/10100
    (before-save . do-auto-fill)
    (dired-mode-hook . auto-revert-mode) ; auto refresh dired when files change
    ;; imenu http://yummymelon.com/devnull/til-imenu.html
    ((markdown-mode
       makefile-mode
       prog-mode) . imenu-add-menubar-index)
    ((markdown-mode
       makefile-mode
       prog-mode) . (lambda () (setq imenu-auto-rescan t))))
#+END_SRC

** SSH Agency
<<sec:ssh-agency>>

[[https://github.com/magit/ssh-agency][ssh-agency]] takes care of handling SSH keys for us so its useful to ensure it is loaded early.

#+NAME: code-ssh-agency
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package ssh-agency
  :ensure t
  :custom (ssh-agency-keys '("~/.ssh/id_ed25519" "~/.ssh/haldane_ed25519")))
#+END_SRC

* Completion and Navigation
<<sec:completion-navigation>>

There are various frameworks and packages available to aid with (auto-)completion such [[https://company-mode.github.io/manual/][Company]], [[https://emacs-helm.github.io/helm/][Helm]] or [[https://github.com/abo-abo/swiper][Ivy]]. I've
explicitly gone with Company but in revising my configuration to write this literate version it looks like I may have
pulled the others in as dependencies of other packages but have opted to purge those from now on.

** Company Mode

[[https://company-mode.github.io/manual/][Company mode]] is a modular text completion framework.

#+NAME: code-company
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package company
  :ensure t
  :defer 0.5
  :hook
  (text-mode . company-mode)
  (prog-mode . company-mode)
  (org-src-mode . company-mode)
  ;; https://themagitian.github.io/posts/emacsconfig/
  :custom
  (company-minimum-prefix-length 3)
  (company-idle-delay 0.3)
  (company-selection-wrap-around t)
  (company-dabbrev-other-buffers t)
  (company-dabbrev-code-other-buffers t)
  (custom-set-faces
   '(company-tooltip ((t (:background "#3e4452"))))
   '(company-tooltip-selection ((t (:background "#454c59"))))
   '(company-tooltip-common ((t (:background "#3e4452"))))
   '(company-scrollbar-bg ((t (:background "#282c34"))))))

#+END_SRC


** Embark
<<sec:embark>>

[[https://github.com/oantolin/embark/][Embark]] "/makes it easy to choose a command to run based on what is near point, both during a minibuffer completion
session (in a way familiar to Helm or Counsel users) and in normal buffers/". I've not yet setup [[https://github.com/oantolin/embark/wiki/Additional-Configuration#use-which-key-like-a-key-menu-prompt][which-key like menu
prompt]] but may do one day.

#+NAME: code-embark
#+BEGIN_SRC emacs-lisp :tangle yes

(use-package embark
  :ensure t
  :defer 0.5
  :bind
  (("C-." . embark-act)         ;; pick some comfortable binding
   ("C-;" . embark-dwim)        ;; good alternative: M-.
   ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'
  :custom
  ;; Optionally replace the key help with a completing-read interface
  (prefix-help-command #'embark-prefix-help-command)
  ;; (add-to-list 'vertico-multiform-categories '(embark-keybinding grid))
  (embark-indicators
	'(embark-minimal-indicator  ; default is embark-mixed-indicator
	  embark-highlight-indicator
	  embark-isearch-highlight-indicator))
  ;; Show the Embark target at point via Eldoc. You may adjust the
  ;; Eldoc strategy, if you want to see the documentation from
  ;; multiple providers. Beware that using this can be a little
  ;; jarring since the message shown in the minibuffer can be more
  ;; than one line, causing the modeline to move up and down:
  ;; (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
  ;; (setq eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)
  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))
;; Consider

#+END_SRC

** Marginalia
<<sec:marginalia>>

[[https://github.com/minad/marginalia/][Marginalia]] enables rich annotations. The ~marginalia-cycle~ command is mapped to ~M-A~ in both the
~minibuffer-local-map~ and the ~completion-list-mode-map~. As we always want to have Marginalia available we ~:init~ it
with the ~marginalia-mode~ rather than deferring.

#+NAME: code-marginalia
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package marginalia
  :ensure t
  ;; Bind `marginalia-cycle' locally in the minibuffer.  To make the binding
  ;; available in the *Completions* buffer, add it to the
  ;; `completion-list-mode-map'.
  :bind
  (:map minibuffer-local-map
	("M-A" . marginalia-cycle))
  (:map completion-list-mode-map
	("M-A" . marginalia-cycle))
  ;; The :init section is always executed.
  :init

  ;; Marginalia must be activated in the :init section of use-package such that
  ;; the mode gets enabled right away. Note that this forces loading the
  ;; package.
  (marginalia-mode))

#+END_SRC

** Movetext
<<sec:movetext>>

[[https://github.com/emacsfodder/move-text][move-text]] is a simple package makes it easy to move the current line or region up (~M-up~) or down (~M-down~).

#+NAME: code-movetext
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package move-text
  :ensure t
  :defer 0.5
  :config
  (move-text-default-bindings))

#+END_SRC

** Orderless
<<sec:orderless>>

[[https://github.com/oantolin/orderless][Orderless]]

#+NAME: code-orderless
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package orderless
  :ensure t
  :custom
  (completion-styles '(orderless basic)
	completion-category-defaults nil
	completion-category-overrides '((file (styles basic partial-completion)))))

#+END_SRC

** Savehist

Savehist (can't find package homepage) persists history over Emacs restarts and helps with [[sec:vertico][Vertico]].

#+NAME: code-savehist
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package savehist
  :ensure t
  :init
  (savehist-mode))

#+END_SRC

** Vertico
<<sec:vertico>>

[[https://github.com/minad/vertico][Vertico]]

#+NAME: code-vertico
#+BEGIN_SRC emacs-lisp :tangle yes

(use-package vertico
  :ensure t
  :init
  (vertico-mode)
  :config
  ;; Different scroll margin
  ;; (setq vertico-scroll-margin 0)

  ;; Show more candidates
  ;; (setq vertico-count 20)

  ;; Grow and shrink the Vertico minibuffer
  ;; (setq vertico-resize t)

  ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
  ;; (setq vertico-cycle t)

  ;; TAB completion - completes path selection rather than selecting current point
  ;; (keymap-set vertico-map "TAB" #'minibuffer-complete)
  )

#+END_SRC

** Vundo
<<sec:vundo>>

[[https://github.com/casouri/vundo][Vundo]] provides a Visual insight into the Undo history of a buffer, I find it really useful and the [[https://archive.casouri.cc/note/2021/visual-undo-tree/index.html][authors overview of
undo buffer history]] was insightful too.

#+NAME: code-vundo
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package vundo
  :ensure t
  :defer 2
  :hook
  (prog-mode . vundo-popup-mode)
  (text-mode . vundo-popup-mode))

#+END_SRC


** Which-key
* Magit
<<sec:magit>>

** Forge
<<sec:forge>>

* Transient
<<sec:transient>>

* Org mode
<<sec:org-mode>>

[[https://orgmode.org/][Orgmode]] is "/A GNU Emacs major mode for keeping notes, authoring documents, computational notebooks, literate
programming, maintaining to-do lists, planning projects, and more - in a fast and effective plain-tests system./"

** Org Babel
<<sec:org-babel>>

[[https://orgmode.org/worg/org-contrib/babel/][Org-babel]] started life as Babel but has been integrated into Org core since version 7.0. It provides a literate
programming environment where text and code (from many languages) can be inter-weaved to give reproducible and literate
documents that can be rendered to a range of formats via [[https://orgmode.org/manual/Exporting.html][org-export]].

#+NAME: code-org-babel
#+BEGIN_SRC emacs-lisp :tangle yes
#+END_SRC

** Org Roam
<<sec:org-roam>>

[[https://www.orgroam.com/][Org-roam]] helps you build a "second brain" of notes using the Zettelkasten method.

#+NAME: code-org-roam
#+BEGIN_SRC emacs-lisp :tangle yes
#+END_SRC

** Org Capture
<<sec:org-capture>>

[[https://orgmode.org/manual/Capture.html#Capture][Org-capture]] is a useful method of opening transient like nested menus to capture notes in predefined files. It allows
you to specify sections and tables to which entries should be added with pre-defined templates.

#+NAME: code-org-capture
#+BEGIN_SRC emacs-lisp :tangle yes
#+END_SRC


** Org GTD
<<sec::org-gtd>>

#+NAME: code-org-gtd
#+BEGIN_SRC emacs-lisp :tangle yes

#+END_SRC

* IDE and LSP

Emacs is my Integrated Development Environment when programming and writing documents. I use a number of language
specific modes but also leverage the power of Language Server Protocol (LSP) to help with navigation, function
arguments, refactoring and so forth.

** envdir
<<sec:envdir>>

#+NAME: code-envdir
#+BEGIN_SRC emacs-lisp :tangle yes
#+END_SRC

** Programming Modes

*** Python Mode
<<sec:python>>

[[https://gitlab.com/python-mode-devs/python-mode][Python mode]] is a major mode for editing Python files. I don't do much to customise this, the following is loaded _after_
[[sec:pyvenv][pyvenv]]...

+ Disable a guess indent message.
+ Enables [[https://ipython.org/][IPython]] as the ~python-shell-interpreter~ and sets some arguments.
+ Defines two custom skeletons, the first to insert a ~print()~ statement with an f-string to show the value of a
  parameters (useful for debugging code). The second to insert a ~@pytest.mark.parametrize()~ test function (which is
  ultimately redundant since I have a [[sec:yasnippet][YASnippet]] template to do the same thing).
+ Maps some keybindings to make it easy to run some short-cuts such as ~python-test-dispatch~, ~pylint~,
  ~blacken-buffer~ and insert some of the common ~python-skeleton~'s.

#+NAME: code-python
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package python
  :after (pyvenv)
  :ensure t
  :defer 1
  :config
  ;; Remove guess indent python message
  (setq python-indent-guess-indent-offset-verbose nil
	python-shell-interpreter "ipython"
	python-shell-interpreter-args "-i --simple-prompt"
	python-environment-directory venv-location)
  (add-to-list 'python-shell-completion-native-disabled-interpreters "ipython")
  ;; Define a skeleton for printing https://emacs.stackexchange.com/questions/80320/defining-custom-python-skeletons
  (python-skeleton-define print
			  "Insert a print statement that will show the value of the argument."
			  "Enter the variable/object name: "
			  "print(f'\\n{" str "=}\\n')")
  (python-skeleton-define parameterized-test
			  "Insert a test with @pytest.mark.parametrize() fixture."
			  "Enter the parameters: "
			  "@pytest.mark.parametrize(\n    (" str "),\n    [\n        pytest.param(,id=\"\"),\n    ]\n)\ndef test_()
-> None:")
  :bind (:map python-mode-map
	      ("C-c p t" . python-pytest-dispatch)
	      ("C-c p l" . pylint)
	      ("C-c p y" . pylint-insert-ignore-comment)
	      ("C-c p n" . numpydoc-generate)
	      ("C-c p b" . blacken-buffer)
	      ("C-c p r" . ruff-format-buffer)
	      ("C-c p v" . pyvenv-workon)
	      ("C-c p T c" . python-skeleton-class)
	      ("C-c p T d" . python-skeleton-def)
	      ("C-c p T f" . python-skeleton-for)
	      ("C-c p T i" . python-skeleton-if)
	      ("C-c p T m" . python-skeleton-import)
	      ("C-c P" . python-skeleton-print)
	      ("C-c p T t" . python-skeleton-try)
	      ("C-c p T T" . python-skeleton-parameterized-test)
	      ("C-c p T w" . python-skeleton-while)))

#+END_SRC

**** Virtual Environments

I use two packages to manage virtual environments in conjunction with [[sec:envdir][~envdir~]]. For general Python virtual environments
I use [[https://github.com/jorgenschaefer/pyvenv][pyvenv]] which allows me to define on a per-host basis the location of virtual environments which are defined
globally, typically I use ~~/.virtualenvs~ which I will activate via a project/repository specific ~.envrc~ file which
[[sec:envdir][envdir]] takes care of activating when I switch to the project directory. Recently I've started using [[https://docs.astral.sh/uv/][uv]] to manage
packages and projects and so have also added [[https://github.com/z80dev/uv-mode][uv-mode]] to my configuration to take care of activating project specific
virtual environments which reside in the ~.venv~ directory created by ~uv~ within the project directory itself.

#+NAME: code-python-pyvenv
#+BEGIN_SRC emacs-lisp :tangle yes

(use-package pyvenv
  :ensure t
  :defer 1
  :config
  ;; Setting work on to easily switch between environments
  (setenv "WORKON_HOME" (expand-file-name "~/.virtualenvs/"))
  (pyvenv-mode 1)
  ;; Display virtual envs in the menu bar
  (setq pyvenv-menu t
	venv-byhost
	'(("kimura" . "~/.virtualenvs/")
	  ("fisher" . "~/.virtualenvs/")
	  ("haldane" . "~/.virtualenvs/")
	  ("ovh" . "~/.virtualenvs/")
	  ("alarmpi" . "~/.virtualenvs/")
	  ("alarmpi-4b" . "~/.virtualenvs/"))
	venv-location (cdr
		       (assoc system-name venv-byhost))
	default-venv-byhost
	'(("kimura" . "~/.virtualenvs/default")
	  ("fisher" . "~/.virtualenvs/python3_9")
	  ("haldane" . "~/.virtualenvs/default")
	  ("ovh" . "~/.virtualenvs/default")
	  ("alarmpi" . "~/.virtualenvs/default")
	  ("alarmpi-4b" . "~/.virtualenvs/default"))
	default-venv (cdr
		      (assoc system-name default-venv-byhost))
	python-environment-directory venv-location)
  ;; Restart the python process when switching environments
  (add-hook 'pyvenv-post-activate-hooks (lambda ()
					  (pyvenv-restart-python)))
  :hook (python-mode . pyvenv-mode)
  (after-init-hook . (pyvenv-workon default-env))
  )

(use-package pyvenv-auto
  :ensure t
  :hook ((python-mode . pyvenv-auto-run)))

#+END_SRC

#+NAME: code-python-uv-mode
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package uv-mode
  :ensure t
  :hook (python-mode . uv-mode-auto-activate-hook))

#+END_SRC

**** Additional packages

***** Blacken
<<sec:blacken>>

[[https://black.readthedocs.io/en/stable/][Black]] is "/the uncompromising code formatter/" and Emacs has the [[https://github.com/pythonic-emacs/blacken][blacken]] package which allows applying Black formatting
to a buffer via keybinding (see above configuration option under [[sec:python][Python]]) or automatically on saving.

#+NAME: code-blacken
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package blacken
  :ensure t
  :after (python-mode)
  :custom
  (blacken-line-length 120)
  :hook (python-mode . blacken-mode))
#+END_SRC

***** Pylint
<<sec:pylint>>

There is an orphaned [[https://github.com/emacsorphanage/pylint][pylint]] package which is referenced for completeness. Typically I defer running [[https://pylint.org][Pylint]] to a
[[https://pre-commit.com][Pre-commit]] hook.

#+NAME: code-pylint
#+BEGIN_SRC emacs-lisp :tangle no

  (use-package pylint
  :hook (python-mode . pylint-add-menu)
  (python-mode . add-key-bindings))

#+END_SRC

***** Pytest
<<sec:pytest>>

[[https://pytest.org][Pytest]] is well supported via [[https://github.com/wbolster/emacs-python-pytest][emacs-python-pytest]]. I've bound ~python-pytest-dispatch~ to ~C-c p t~ which brings up a
transient buffer with options for running ~pytest~ on a given file or function at the cursor location. This transient
buffer is highly configurable and I add some options for running regression tests (both [[https://pytest-regtest.readthedocs.io/en/latest/][pytest-regtest]] and [[https://syrupy-project.github.io/syrupy/][syrupy]]
although I'm tending towards the later these days).

#+NAME: code-pytest
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package python-pytest
  :after (pyvenv)
  :ensure t
  :config
  (transient-append-suffix
    'python-pytest-dispatch
    '(0)
    ["Regression Tests"
     ("-r" "Reset regression tests" "--regtest-reset")
     ("--su" "Reset Syrupy snapshot" "--snapshot-update")
     ("--tee" "Print results" "--regtest-tee")
     ("--nodiff" "Suppress output" "--regtest-nodiff")
     ("--endings" "Do not strip whitespaces at end of recorded lines" "--regtest-consider-line-endings")])
  (transient-append-suffix
    'python-pytest-dispatch
    '(0)
    ["Profiling"
     ("-P" "Generate profiling information" "--profile")
     ("--profile-svg" "Generate profiling graph" "--profile-svg")
     ("--pstats-dir" "Configure the dump directory of profile data files" "--pstats-dir")
     ("--element-number" "Defines how many elements will display in a result" "--element-number")
     ("--strip-dirs" "Configure to show/hide the leading path information from file names" "--strip-dirs")])
  )
#+END_SRC

***** Ruff
<<sec:ruff>>

[[https://docs.astral.sh/ruff][Ruff]] is a fast Python linter that is subsuming Black, Flake8, Yapf and Pylint.

+ [[https://github.com/scop/emacs-ruff-format][emacs-ruff-format]]
+ [[https://github.com/christophermadsen/emacs-lazy-ruff][emacs-lazy-ruff]]
+ [[https://github.com/erickgnavar/flymake-ruff][flymake-ruff]]

#+NAME: code-ruff
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package ruff-format
  :ensure t
  :after (python-mode)
  :hook (python-mode . ruff-format-on-save-mode))

(use-package lazy-ruff
  :ensure t
  :after (python-mode)
  :bind (("C-c p l" . lazy-ruff-lint-format-dwim)) ;; keybinding
  :config
  (lazy-ruff-mode-global-toggle t)) ;; Enable the lazy-ruff minor mode globally

(use-package flymake-ruff
  :ensure t
  :after (python-mode)
  ;; :hook (python-mode . flymake-ruff-load))
  :hook (lsp-managed-mode . flymake-ruff-load))

#+END_SRC


***** Yapf
<<sec:yapf>>

[[https://github.com/JorisE/yapfify][Yapfify]] can be used to apply Googles [[https://github.com/google/yapf][yapf]] formatting. I don't use this so the following section is not tangled to my
config but is included on the off-chance I change my mind or someone else finds it useful.

#+NAME: code-yapf
#+BEGIN_SRC emacs-lisp :tangle no
(use-package yapfify
  :ensure t
  :defer t
  :after (python-mode)
  :hook (python-mode . yapf-mode))

#+END_SRC

**** Virtual Environments

I use two packages to manage virtual environments in conjunction with [[sec:envdir][~envdir~]]. For general Python virtual environments
I use [[https://github.com/jorgenschaefer/pyvenv][pyvenv]] which allows me to define on a per-host basis the location of virtual environments which are defined
globally, typically I use ~~/.virtualenvs~ which I will activate via a project/repository specific ~.envrc~ file which
[[sec:envdir][envdir]] takes care of activating when I switch to the project directory. Recently I've started using [[https://docs.astral.sh/uv/][uv]] to manage
packages and projects and so have also added [[https://github.com/z80dev/uv-mode][uv-mode]] to my configuration to take care of activating project specific
virtual environments which reside in the ~.venv~ directory created by ~uv~ within the project directory itself.

#+NAME: code-python-pyvenv
#+BEGIN_SRC emacs-lisp :tangle yes

(use-package pyvenv
  :ensure t
  :defer 1
  :config
  ;; Setting work on to easily switch between environments
  (setenv "WORKON_HOME" (expand-file-name "~/.virtualenvs/"))
  (pyvenv-mode 1)
  ;; Display virtual envs in the menu bar
  (setq pyvenv-menu t
	venv-byhost
	'(("kimura" . "~/.virtualenvs/")
	  ("fisher" . "~/.virtualenvs/")
	  ("haldane" . "~/.virtualenvs/")
	  ("ovh" . "~/.virtualenvs/")
	  ("alarmpi" . "~/.virtualenvs/")
	  ("alarmpi-4b" . "~/.virtualenvs/"))
	venv-location (cdr
		       (assoc system-name venv-byhost))
	default-venv-byhost
	'(("kimura" . "~/.virtualenvs/default")
	  ("fisher" . "~/.virtualenvs/python3_9")
	  ("haldane" . "~/.virtualenvs/default")
	  ("ovh" . "~/.virtualenvs/default")
	  ("alarmpi" . "~/.virtualenvs/default")
	  ("alarmpi-4b" . "~/.virtualenvs/default"))
	default-venv (cdr
		      (assoc system-name default-venv-byhost))
	python-environment-directory venv-location)
  ;; Restart the python process when switching environments
  (add-hook 'pyvenv-post-activate-hooks (lambda ()
					  (pyvenv-restart-python)))
  :hook (python-mode . pyvenv-mode)
  (after-init-hook . (pyvenv-workon default-env))
  )

(use-package pyvenv-auto
  :ensure t
  :hook ((python-mode . pyvenv-auto-run)))

#+END_SRC

#+NAME: code-python-uv-mode
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package uv-mode
  :ensure t
  :hook (python-mode . uv-mode-auto-activate-hook))

#+END_SRC

**** Additional packages

***** Blacken
<<sec:blacken>>

[[https://black.readthedocs.io/en/stable/][Black]] is "/the uncompromising code formatter/" and Emacs has the [[https://github.com/pythonic-emacs/blacken][blacken]] package which allows applying Black formatting
to a buffer via keybinding (see above configuration option under [[sec:python][Python]]) or automatically on saving.

#+NAME: code-blacken
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package blacken
  :ensure t
  :after (python-mode)
  :custom
  (blacken-line-length 120)
  :hook (python-mode . blacken-mode))
#+END_SRC

***** Pylint
<<sec:pylint>>

There is an orphaned [[https://github.com/emacsorphanage/pylint][pylint]] package which is referenced for completeness. Typically I defer running [[https://pylint.org][Pylint]] to a
[[https://pre-commit.com][Pre-commit]] hook.

#+NAME: code-pylint
#+BEGIN_SRC emacs-lisp :tangle no

  (use-package pylint
  :hook (python-mode . pylint-add-menu)
  (python-mode . add-key-bindings))

#+END_SRC

***** Pytest
<<sec:pytest>>

[[https://pytest.org][Pytest]] is well supported via [[https://github.com/wbolster/emacs-python-pytest][emacs-python-pytest]]. I've bound ~python-pytest-dispatch~ to ~C-c p t~ which brings up a
transient buffer with options for running ~pytest~ on a given file or function at the cursor location. This transient
buffer is highly configurable and I add some options for running regression tests (both [[https://pytest-regtest.readthedocs.io/en/latest/][pytest-regtest]] and [[https://syrupy-project.github.io/syrupy/][syrupy]]
although I'm tending towards the later these days).

#+NAME: code-pytest
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package python-pytest
  :after (pyvenv)
  :ensure t
  :config
  (transient-append-suffix
    'python-pytest-dispatch
    '(0)
    ["Regression Tests"
     ("-r" "Reset regression tests" "--regtest-reset")
     ("--su" "Reset Syrupy snapshot" "--snapshot-update")
     ("--tee" "Print results" "--regtest-tee")
     ("--nodiff" "Suppress output" "--regtest-nodiff")
     ("--endings" "Do not strip whitespaces at end of recorded lines" "--regtest-consider-line-endings")])
  (transient-append-suffix
    'python-pytest-dispatch
    '(0)
    ["Profiling"
     ("-P" "Generate profiling information" "--profile")
     ("--profile-svg" "Generate profiling graph" "--profile-svg")
     ("--pstats-dir" "Configure the dump directory of profile data files" "--pstats-dir")
     ("--element-number" "Defines how many elements will display in a result" "--element-number")
     ("--strip-dirs" "Configure to show/hide the leading path information from file names" "--strip-dirs")])
  )
#+END_SRC

***** Ruff
<<sec:ruff>>

[[https://docs.astral.sh/ruff][Ruff]] is a fast Python linter that is subsuming Black, Flake8, Yapf and Pylint.

+ [[https://github.com/scop/emacs-ruff-format][emacs-ruff-format]]
+ [[https://github.com/christophermadsen/emacs-lazy-ruff][emacs-lazy-ruff]]
+ [[https://github.com/erickgnavar/flymake-ruff][flymake-ruff]]

#+NAME: code-ruff
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package ruff-format
  :ensure t
  :after (python-mode)
  :hook (python-mode . ruff-format-on-save-mode))

(use-package lazy-ruff
  :ensure t
  :after (python-mode)
  :bind (("C-c p l" . lazy-ruff-lint-format-dwim)) ;; keybinding
  :config
  (lazy-ruff-mode-global-toggle t)) ;; Enable the lazy-ruff minor mode globally

(use-package flymake-ruff
  :ensure t
  :after (python-mode)
  ;; :hook (python-mode . flymake-ruff-load))
  :hook (lsp-managed-mode . flymake-ruff-load))

#+END_SRC


*** ESS Mode
<<sec:ess>>

#+NAME: code-ess
#+BEGIN_SRC emacs-lisp :tangle yes
#+END_SRC


*** JS Mode
<<sec:js>>

#+NAME: code-js
#+BEGIN_SRC emacs-lisp :tangle yes
#+END_SRC

*** Just Mode
<<sec:just>>

#+NAME: code-just
#+BEGIN_SRC emacs-lisp :tangle yes
#+END_SRC


*** Latex Mode
<<sec:latex>>

#+NAME: code-latex
#+BEGIN_SRC emacs-lisp :tangle yes
#+END_SRC

*** Markdown Mode
<<sec:markdown>>

#+NAME: code-markdown
#+BEGIN_SRC emacs-lisp :tangle yes
#+END_SRC

*** Mermaid Mode
<<sec:mermaid>>

#+NAME: code-mermaid
#+BEGIN_SRC emacs-lisp :tangle yes
#+END_SRC


*** Nix Mode
<<sec:nix>>

#+NAME: code-nix
#+BEGIN_SRC emacs-lisp :tangle yes
#+END_SRC


*** Rust Mode
<<sec:rust>>

#+NAME: code-rust
#+BEGIN_SRC emacs-lisp :tangle yes
#+END_SRC


*** Sqlite Mode
<<sec:sqlite>>

#+NAME: code-sqlite
#+BEGIN_SRC emacs-lisp :tangle yes
#+END_SRC


*** Yaml Mode
<<sec:yaml>>

#+NAME: code-yaml
#+BEGIN_SRC emacs-lisp :tangle yes
#+END_SRC

*** Polymode Mode
<<sec:polymode>>

#+NAME: code-polymode
#+BEGIN_SRC emacs-lisp :tangle yes
#+END_SRC


** LSP Mode
<<sec:lsp-mode>>

Whilst Eglot is built-in to Emacs since v30-ish I started using [[https://emacs-lsp.github.io/lsp-mode/][LSP Mode]] before this and have for now stuck with it.

** Projectile
<<sec:projectile>>

** Treesitter
<<sec:treesitter>>

** YASnippet
<<sec:yasnippet>>

[[https://joaotavora.github.io/yasnippet/][YASnippet]] (Yet another snippet extension) is a brilliant templating system that allows you to define code-chunks that
are inserted with a few keystrokes, and then prompting you for specific fields, saving you considerable time in writing
boiler-plate code. We enable the templates via hooks for ~prog-mode~, ~org-mode~ and ~r-mode~ and load a bunch of
pre-defined snippets from the [[https://github.com/AndreaCrotti/yasnippet-snippets][yasnippet-snippets]] package.

#+NAME: code-yasnippet-config
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package yasnippet
  :ensure t
  :config
  (yas-reload-all)
  (add-hook 'prog-mode-hook #'yas-minor-mode)
  (add-hook 'org-mode-hook #'yas-minor-mode)
  (add-hook 'ess-r-mode-hook #'yas-minor-mode))

(use-package yasnippet-snippets
  :ensure t)

#+END_SRC

The snippets I have written/customised are not included here. They are loaded from the ~snippet~ directory. If you are
interested in my snippets see the [[https://codeberg.org/slackline/emacs/src/branch/master/snippets][snippets]] in my configuration repository.

** direnv
<<sec:direnv>>

[[https://direnv.net/][direnv]] allows easy activation of virtual environment, setting custom variables or running other actions conditional on
entering a directory. Naturally there is [[https://github.com/wbolster/emacs-direnv][emacs-direnv]] which provides integration with Emacs.
#+NAME: code-direnv
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package direnv
  :ensure t
  :config
  (direnv-mode))
#+END_SRC

* Dired
<<sec:dired>>

I like the [[https://github.com/alexluigit/dirvish][dirvish]] package for extending the basic [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html][built-in Dired]].

Some useful resources on ~dired~ can also be found in

+ [[https://pragmaticemacs.wordpress.com/category/dired/][dired | Pragmatic Emacs]]
+ [[https://www.masteringemacs.org/article/working-multiple-files-dired][Working with multiple files in dired - Mastering Emacs]]
+ [[https://github.com/Fuco1/dired-hacks][Fuco1/dired-hacks: Collection of useful dired additions]]

#+NAME: code-dirvish
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package dirvish
  :ensure t
  :init
  (dirvish-override-dired-mode)
  :config
  (setq dirvish-attributes
	'(vc-state subtree-state all-the-icons collapse git-msg file-time file-size))
  ;; Placement
  ;; (setq dirvish-use-header-line nil)     ; hide header line (show the classic dired header)
  ;; (setq dirvish-use-mode-line nil)       ; hide mode line
  (setq dirvish-use-header-line 'global)    ; make header line span all panes

  ;; Hide the parent directory
  (setq dirvish-default-layout '(0 0.4 0.6))
  ;; Height
  ;;; '(25 . 35) means
  ;;;   - height in single window sessions is 25
  ;;;   - height in full-frame sessions is 35
  (setq dirvish-header-line-height '(25 . 35))
  (setq dirvish-mode-line-height 25) ; shorthand for '(25 . 25)

  ;; Segments
  ;;; 1. the order of segments *matters* here
  ;;; 2. it's ok to place raw string inside
  (setq dirvish-header-line-format
	'(:left (path) :right (free-space))
	dirvish-mode-line-format
	'(:left (sort file-time " " file-size symlink) :right (omit yank index))))
#+END_SRC

** All the Icons
<<sec:all-the-icons>>

To make Dired/Dirvish look nice we also need icons.

#+NAME: code-all-the-icons
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package all-the-icons
  :ensure t
  :after dirvish)

(use-package all-the-icons-dired
  :ensure t
  :after all-the-icons)

(use-package all-the-icons-ibuffer
  :ensure t
  :after all-the-icons)
#+END_SRC

** Dired Extensions
<<sec::dired-extensions>>

There are a bunch of useful extensions to ~dired~ and [[https://github.com/Fuco1/dired-hacks][Fuco1/dired-hacks: Collection of useful dired additions]] has most
of them listed. I currently use the following

+ dired-quick-sort
+ [[https://github.com/stsquad/dired-rsync][dired-rsync]] (also the source for ~dired-rsync-transient~)
+ [[https://codeberg.org/danrobi/dired-multi-copy][dired-multi-copy]] (installed via ~:vc~ option to ~use-package~ as not yet on [[https://melpa.org/][MELPA]])
+ [[https://github.com/punassuming/ranger.el][dired-ranger]]
+ dired-subtree

#+NAME: code-dired-extensions
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package dired-quick-sort
  :ensure t
  :defer 0.5
  :after dirvish
  :config
  (dired-quick-sort-setup))

;;
(use-package dired-rsync
  :ensure t
  :defer 0.5
  :after dirvish)

(use-package dired-rsync-transient
  :ensure t
  :defer 0.5
  :after dirvish)

;; https://codeberg.org/danrobi/dired-multi-copy (not on MELPA yet)
;; (use-package dired-multi-copy
;;   :ensure t)

;; https://github.com/punassuming/ranger.el
(use-package dired-ranger
  :ensure t
  :defer 0.5
  :bind (:map dired-mode-map
              ("W" . dired-ranger-copy)
              ("X" . dired-ranger-move)
              ("Y" . dired-ranger-paste)))


(use-package dired-subtree
  :ensure t
  :config
  (bind-keys :map dired-mode-map
             ("i" . dired-subtree-insert)
             (";" . dired-subtree-remove)))
#+END_SRC

* TRAMP
<<sec:tramp>>

* Terminals
<<sec:terminals>>

** vterm
<<sec:vterm>>

* Miscellaneous
<<sec:misc>>

** OSM
<<sec:osc>>

** Pass
<<sec:pass>>

** Scratch
<<sec:scratch>>

** tmr
<<sec:tmr>>



* Themes and Keybindings

I purposefully leave loading keyboard shortcuts until the very end so that all functions that are mapped to key-bindings
are already defined. Theme loading is deferred until the end too that way I have a visual cue as to whether all of my
configuration has successfully loaded or not.

** Themes
<<sec:themes>>

** Centaur Tabs
<<sec:centaur_tabs>>

** Keybindings
<<sec:keybindings>>

* Custom Functions
<<sec:custom_functions>>

** Reinstall Package

A handy way to [[https://emacsredux.com/blog/2020/09/12/reinstalling-emacs-packages/][reinstall a package]].

#+NAME: code-reinstall-package
#+BEGIN_SRC emacs-lisp :tangle yes
(defun ns/reinstall-package (pkg)
  (interactive (list (intern (completing-read "Reinstall package: " (mapcar #'car package-alist)))))
  (unload-feature pkg)
  (package-reinstall pkg)
  (require pkg))
#+END_SRC


* Footer
<<sec:footer>>

Library [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Library-Headers.html][conventions]] require a footer.

#+NAME: code-footer
#+begin_src emacs-lisp :tangle yes
  (provide 'init.el)
  ;;; init.el ends here
#+end_src

* On Literate Configuration

** Development

During development I created the Org file at ~~/.config/emacs/config.org~ and set the header to tangle to ~init.el~
within that directory so that I didn't clobber my existing ~init.el~.

#+NAME: example-tangle-header
#+BEGIN_SRC org-mode :tangle no
,#+TITLE: Literate Emacs Configuration
,#+PROPERTY: header-args : tangle init.el
,#+OPTIONS: toc:2 num:nil
,#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup
#+END_SRC

** Different target files

When writing code blocks in Org-mode they have the structure shown below which allows the global ~:tangle~ target to be
over-ridden. Useful for writing the ~early-init.el~

#+NAME: example-tangle-alt-target-file
#+BEGIN_SRC org-mode :tangle no
,#+NAME
,#+BEGIN_SRC emacs-lisp :tangle <target_file>
(setq some-custom-setting 1)
,#+END_SRC
#+END_SRC

** Exclude block

If there is a particular code block I _don't_ want to tangle and include it is possible to disable it.

#+NAME: example-tangle-exclude-code-block
#+BEGIN_SRC org-mode :tangle no
,#+BEGIN_SRC emacs-lisp :tangle no
(setq some-other-custom-setting nil)
,#+END_SRC
#+END_SRC

** Testing configuration

As I worked through developing this configuration I tangled the code using ~org-babel-tangle~ (bound to ~C-c C-v t~) and
then started Emacs with the ~--init-directory ~/.config/emacs/config~ so that it picked up the tangled configuration
files within this directory (i.e. ~early-init.el~ and ~init.el~).

** Rendering to HTML

As with much of my config its not original, I found someone else who had done what I want to do and have learnt/borrowed
(heavily) from them. In the case of this literate configuration and its conversion to HTML I have taken inspiration from
[[https://github.com/Panadestein/emacsd][Panadestein's emacsd]] repository.

Of particular use is the GitHub workflow which runs a Bash script ([[https://github.com/Panadestein/emacsd/blob/master/publi.sh][publi.sh]]) to use Emacs to [[https://github.com/Panadestein/emacsd/blob/master/build-site.el][build-site.el]]
 which I have copied in their entirety to build and deploy the site on GitHub pages (for now, I intend to migrate it to
 Codeberg Pages once I've sussed those out).


* Links

+ [[https://orgmode.org/worg/org-contrib/babel/][Babel: Active Code in Org]]
+ [[https://leanpub.com/lit-config/read][Literate Configuration | Diego Zamboni]]
+ [[https://org-babel.readthedocs.io/en/latest/][Org Babel reference card]]

** use-package

+ [[https://www.gnu.org/software/emacs/manual/html_mono/use-package.html][Emacs Manual : use-package]]
+ [[https://ianyepan.github.io/posts/setting-up-use-package/][Setting up use-package]]
+ [[https://batsov.com/articles/2025/04/17/using-use-package-the-right-way/][Using use-package the right way - (think)]]

** Examples

+ [[https://panadestein.github.io/emacsd/][Emacs literate configuration]] by Panadestein
+ [[https://tkreuziger.com/posts/2023-11-24-setting_up_my_literate_config_for_emacs/][Setting up my literate config for Emacs | Tristan Kreuziger]]
